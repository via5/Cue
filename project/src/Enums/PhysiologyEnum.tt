<#@ include file="Enums.tt" #><#
var vars = new V[]
{

// Appearance
// ==========

//  maximum gloss factor; 1.0 should be realistic, but can go above or below
V.Float("MaxSweat"),

// maximum lerp towards red; 1.0 should be realistic, but can go above or below
V.Float("MaxFlush"),


// Temperature
// ===========
// Body temperature is defined by two numbers: the current value and the target
// value, both [0, 1]. `temperatureExcitementMax` is used to determine the
// target value based on excitement, and `temperatureExcitementRate` and
// `temperatureDecayRate` are rates at which the current value increases or
// decreases to reach the target

// the excitement value at which body temperature should be at 1.0 (its
// maximum); the target temperature is therefore
//     `excitement / temperatureExcitementMax`, clamped[0, 1]
V.Float("TemperatureExcitementMax", new Limit(0, 1)),

// the rate at which body temperature increases towards the current target based
// on the current excitement; the rate is the current excitement (values [0, 1])
// multiplied by this
V.Float("TemperatureExcitementRate"),

// rate at which the temperature decreases when the target is below the current
// temperature
V.Float("TemperatureDecayRate"),


// Tiredness
// =========
// Tiredness is defined by two numbers: the base value and the current value,
// both [0, 1]. The base tiredness starts at 0, goes up slightly for every
// orgasm, and decays when excitement stays low enough. The current value is
// never below base, but always shoots up to 1.0 quickly after orgasm and slowly
// goes back to base.

// the rate at which tiredness increases during the post-orgasm state; by
// default, the rate is high so 1.0 is reached during `postOrgasmTime`
V.Float("TirednessRateDuringPostOrgasm"),

// the rate at which the base value decreases if excitement is lower than
// `tirednessMaxExcitementForBaseDecay`
V.Float("TirednessBaseDecayRate"),

// the rate at which the current value decreases back to the base value
V.Float("TirednessBackToBaseRate"),

// time after post-orgasm during which the base value will not decay
V.Float("DelayAfterOrgasmUntilTirednessDecay"),

// if the excitement is above this, the base value will not decay
V.Float("TirednessMaxExcitementForBaseDecay"),

// added to the base value on each orgasm
V.Float("OrgasmBaseTirednessIncrease"),


// Voice
// =====
// central value in the range for a neutral voice pitch, defaults to 0.5,
// which is mapped to 1.0 for MacGruber's Life
V.Float("NeutralVoicePitch"),


// Sensitivity
// ===========
// Controls the rate at which excitement goes up when various body parts are
// stimulated. Each source has a "rate" and a "max":
//
//   - rate: the rate at which excitement goes up when the source is
//           activated
//   - max:  the maximum excitement value that can be reached with this
//           source alone; if this is not 1.0, the character cannot have an
//           orgasm from this source
//
// The rate is multiplied by a value that depends on the level of stimulation of
// a particular body part, controlled by the `factor` parameters below. For
// example, the default `lipsFactor` is 0.1 and `mouthFactor` is 0.9. If only
// the lips are being triggered, `mouthRate` is multiplied by 0.1. The value is
// not clamped and can go above 1.0.
//
// Although these are named "factors", they're really just added together. VaM
// does not have variable triggers that depend on the pressure being applied,
// they're either 0 or 1. These factors are therefore always multiplied by 1
// when the trigger is active. If a future version supports variable triggers,
// the factors should scale accordingly.
//
// If multiple sources are active at the same time, the highest "max" value is
// used and rates are added.
//
// As an example, the rate at which excitement goes up when the mouth is
// triggered would be something like:
//
//     ((lipsTrigger * lipsFactor) + (mouthTrigger * mouthFactor)) * mouthRate
//
// clamped between [0, mouthMax]. Both `lipsTrigger` and `mouthTrigger` can be
// either 0 or 1 depending on whether the trigger is active in VaM.
//
// Note that some excitement values are controlled by the personality, see
// PersonalityEnum.tt


// rate at which excitement goes up when the lips or mouth are being
// triggered
V.Float("MouthRate"),

// maximum excitement value when the mouth is being triggered
V.Float("MouthMax"),

// how much the lips and mouth contribute to mouthRate
V.Float("LipsFactor"),
V.Float("MouthFactor"),


// rate at which excitement goes up when the breasts are being triggered
V.Float("BreastsRate"),

// maximum excitement value when the breasts are being triggered
V.Float("BreastsMax"),

// how much the left and right breasts contribute to breastsRate
V.Float("LeftBreastFactor"),
V.Float("RightBreastFactor"),

// rate at which excitement goes up when the genitals are being triggered
V.Float("GenitalsRate"),

// maximum excitement value when the genitals are being triggered
V.Float("GenitalsMax"),

// how much the labia contributes to genitalsRate; since the labia trigger is
// the only one used for genitals, this should be 1.0
V.Float("LabiaFactor"),


// rate at which excitement goes up when penetrated
V.Float("PenetrationRate"),

// maximum excitement value when penetrated
V.Float("PenetrationMax"),

// how much the three triggers inside the vagina contribute to
// penetrationRate; note that the latter two are difficult to trigger
// normally in VaM
V.Float("VaginaFactor"),
V.Float("DeepVaginaFactor"),
V.Float("DeeperVaginaFactor"),


// rate at which excitement decreases when there is no stimulation of any
// body part
V.Float("ExcitementDecayRate"),

// excitement will reset to this value after orgasm
V.Float("ExcitementPostOrgasm"),

// time during which orgasms and post-orgasm states will last; both are used
// for animations and adjusting tiredness
V.Float("OrgasmTime"),
V.Float("PostOrgasmTime"),

// a flat value that multiplies the excitement rate, defaults to 1.0; this
// can be changed to globally increase or decrease the rate at which
// excitement changes
V.Float("RateAdjustment"),

};

#><#= Generate(vars, "PE", "Physiology") #>
