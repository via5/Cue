<#@ include file="Enums.tt" #><#

// Terms
// =====
//
// excitement (float, [0, 1])
//     character's excitement value, orgasm at 1
//
// tiredness (float, [0, 1])
//     how tired a character is:
//         - "base" tiredness starts at 0, goes up slightly for every orgasm,
//         decays when excitement stays low enough
//         - "actual" tiredness is never below base, but always shoots up to 1.0
//         quickly after orgasm and slowly goes back to base
//
// energy (float, [0, 1])
//     how energetic a character is, goes up with excitement but can be dampened
//     by tiredness; see *TirednessFactor
//
//     energy is used for gaze and movement, but with independent factors,
//     because dampening movement too much makes the scene less interesting
//
// busy
//     used for some gaze targets; whether a person is currently doing an action
//     where they're unlikely to look away, such as a HJ, BJ, etc.
//
// weight
//     each gaze target has a weight as a number; to decide which target a
//     person should look at next, the chance of a target being picked is its
//     weight divided by the sum of the weight of all targets (that is, the
//     higher the weight, the more chances a target has of getting picked)
//
// personal space
//     a character is inside another character's personal space when certain
//     body parts are close enough (this is an expensive check, so only some
//     body parts are handled, such as hands, head, chest, hips, genitals and
//     feet)
//
// groped
//     whether a character's head, breasts or genitals are currently being
//     touched by another character
//
// sex
//     includes both penetration and groping
//
// scene idle
//     the current scene is considered idle if the excitement of all characters
//     is 0
//
// emergency
//     something characters should be looking at immediately, such as another
//     character orgasming or the player's eyes when grabbing the head
//
//
// Durations
// ---------
// These are configurable durations that can have their min/max change
// depending on excitement.
//
// A duration can be a simple array with two floats: the minimum and maximum in
// seconds. The duration is a random number generated between the min and max,
// regenerated every time the duration elapses.
//
// A duration can also have a sliding window, which is a smaller window within
// the min and max that moves towards the max as excitement goes up.
//
// For these sliding durations, the duration is an object with two subobjects:
// "range" and "nextTimeRange". Both are Range objects, described below. The
// "range" object is for the duration itself, the "nextTimeRange" object is for
// the interval after which the current range is regenerated.
//
// A Range object has these values:
//
//     min, max      minimum and maximum durations (seconds, required)
//
//     window        duration range from the minimum, slides towards max as
//                   excitement goes up (optional, seconds, defaults to full
//                   range)
//
//     windowEasing  the easing used for the sliding window (optional, default
//                   "linear", see Easings.cs)
//
//     rng           random generation algorithm (optional, defaults to
//                   "uniform"); see below
//
// As an example, a sliding duration with a min/max of [1.0, 2.0] and a window
// of 0.2 would generate durations between [1.0, 1.2] if excitement is 0.0 and
// between [1.8, 2.0] if excitement is 1.0. The json would be like this:
//
//     "someDuration":
//     {
//         "range":
//         {
//             "min": 1.0,
//             "max": 2.0,
//             "window": 0.2
//         }
//     }
//
// The 'rng' value can be a string "uniform" or "normal". It can also be an
// object with a 'type' value with the same strings. If the 'type' is "normal",
// these additional values are supported:
//
//     centerMin,   range of the center of the distribution, both [0, 1],
//     centerMax    defaults to 0.5 for both; as excitement goes up, the center
//                  goes towards the max
//
//                  (this is used for the mean, as `(min + max) * center)`)
//
//     widthMin,    range of the width of the distribution; as excitement goes,
//     widthMax     up, the width goes towards the max
//
//                  values above 1.0 make a flatter curve, values below 1.0 make
//                  a higher peak around the center, defaults to 1.0 for both
//
//                  (this is used for the sigma, as `3.0/width`)


var vars = new V[]
{

// Gaze
// ====
// Controls what characters are looking at.

// time it takes to move the head to follow the eyes
V.Duration("GazeDuration"),

// time to wait before picking the next target
V.Duration("GazeRandomInterval"),

// time it takes to move the head when looking at an emergency
V.Duration("EmergencyGazeDuration"),


// whether saccades are enabled
V.Bool("GazeSaccade"),

// time between saccades
V.Duration("GazeSaccadeInterval"),

// saccade movement range; a random value between [-this, +this] is picked for
// both horizontal and vertical offsets
V.Float("GazeSaccadeMovementRange"),


// Avoidance
// ---------

// excitement value below which the character avoids looking at the player
V.Float("AvoidGazePlayer"),

// excitement value below which the character avoids looking at the player when
// inside personal space
V.Float("AvoidGazePlayerInsidePersonalSpace"),

// excitement value below which the character avoids looking at the player
// when involved in sex
V.Float("AvoidGazePlayerDuringSex"),

// time after orgasm during which avoidance with player is disabled, starts
// after the post-orgasm state (seconds)
V.Float("AvoidGazePlayerDelayAfterOrgasm"),

// when the player is being avoided, weight of the player's eyes for gaze; set
// to -1 to actively avoid the player by picking a different target if the
// player gets into view
//
// see also AvoidGazeAnger
V.Float("AvoidGazePlayerWeight"),


// excitement value below which the character avoids looking at other characters
V.Float("AvoidGazeOthers"),

// excitement value below which the character avoids looking at other
// characters when they're inside personal space
V.Float("AvoidGazeOthersInsidePersonalSpace"),

// excitement value below which the character avoids looking at other characters
// when involved in sex with this one
V.Float("AvoidGazeOthersDuringSex"),

// time after orgasm during which avoidable with others is disabled, starts
// after the post-orgasm state (seconds)
V.Float("AvoidGazeOthersDelayAfterOrgasm"),

// when other characters are being avoided, weight of the characters' eyes for
// gaze; set to -1 to actively avoid other characters by picking a different
// target if they get into view
//
// see also AvoidGazeAnger
V.Float("AvoidGazeOthersWeight"),


// excitement value below which this character avoids looking at other
// characters having sex with someone else
V.Float("AvoidGazeUninvolvedHavingSex"),


// Weights
// -------

// looking at a target directly above the character's head when mood is normal
// or post-orgasm; this weight is multiplied by the character's energy
V.Float("LookAboveMaxWeight"),

// looking at a target directly above the character's head during orgasm; this
// weight is multiplied by the character's energy
V.Float("LookAboveMaxWeightOrgasm"),

// excitement value below which looking up is disabled; avoids looking up for
// low excitement, since it's a pretty strong emote, should probably be higher
// than MaxOtherSexExcitement
V.Float("LookAboveMinExcitement"),

// physical rate value below which looking up is disabled; avoids looking up
// when the excitement source is only emotional (note that rates are low values,
// typically below 0.02)
V.Float("LookAboveMinPhysicalRate"),


// looking at a random point when not busy and scene is idle
V.Float("IdleNaturalRandomWeight"),

// looking at a random point when not busy and scene is idle, and there is only
// this character and the player in the scene
V.Float("IdleEmptyRandomWeight"),

// looking at a random point when not busy and scene is not idle
V.Float("NaturalRandomWeight"),

// looking at a random person when not busy; see also OtherEyesExcitementWeight
V.Float("NaturalOtherEyesWeight"),

// looking at a random person when busy; see also OtherEyesExcitementWeight
V.Float("BusyOtherEyesWeight"),

// looking at the player randomly when not busy, used instead of
// NaturalOtherEyesWeight for the player (allows for randomly looking at the
// player more often)
V.Float("NaturalPlayerEyesWeight"),

// looking at the player randomly when busy, used instead of BusyOtherEyesWeight
// for the player (allows for randomly looking at the player more often)
V.Float("BusyPlayerEyesWeight"),

// tiredness value above which random points and targets are disabled
V.Float("MaxTirednessForRandomGaze", new Limit(0, 1)),

// used with naturalOtherEyesWeight and busyOtherEyesWeight: multiplied by the
// target's excitement and added to those weights; this is used to increase the
// chances of looking at a target that has a high excitement value
V.Float("OtherEyesExcitementWeight"),

// looking at a person who is currently orgasming
V.Float("OtherEyesOrgasmWeight"),


// if this character is giving a BJ, looking at the other character's eyes
// or genitals
V.Float("BlowjobEyesWeight"),
V.Float("BlowjobGenitalsWeight"),

// if this character is giving a HJ, looking at the other character's eyes or
// genitals
V.Float("HandjobEyesWeight"),
V.Float("HandjobGenitalsWeight"),

// if this character is being penetrated, looking at the other character's eyes
// or genitals
V.Float("PenetratedEyesWeight"),
V.Float("PenetratedGenitalsWeight"),

// if this character penetrating another, looking at the other character's eyes
// or genitals
V.Float("PenetratingEyesWeight"),
V.Float("PenetratingGenitalsWeight"),

// while being groped, looking at the other character's eyes or the body part
// being groped
V.Float("GropedEyesWeight"),
V.Float("GropedTargetWeight"),

// while groping another, looking at the other character's eyes or the body part
// being groped
V.Float("GropingEyesWeight"),
V.Float("GropingTargetWeight"),

// if another character is giving a BJ, looking at that character's eyes or the
// target's eyes or genitals
V.Float("OtherBlowjobEyesWeight"),
V.Float("OtherBlowjobTargetEyesWeight"),
V.Float("OtherBlowjobTargetGenitalsWeight"),

// if another character is giving a HJ, looking at that character's eyes or the
// target's eyes or genitals
V.Float("OtherHandjobEyesWeight"),
V.Float("OtherHandjobTargetEyesWeight"),
V.Float("OtherHandjobTargetGenitalsWeight"),

// if another character is being penetrated, looking at that character's eyes or
// the penetrator's eyes genitals
V.Float("OtherPenetrationEyesWeight"),
V.Float("OtherPenetrationSourceEyesWeight"),
V.Float("OtherPenetrationSourceGenitalsWeight"),

// if another character is being groped, looking at that character's eyes or
// body part, or the groper's eyes
V.Float("OtherGropedEyesWeight"),
V.Float("OtherGropedSourceEyesWeight"),
V.Float("OtherGropedTargetWeight"),



// Excitement
// ==========
// Controls excitement values

// the sum of all the excitement rates (not values) of all other characters in
// the scene is multiplied by this number; the result is added to the rate at
// which this character's excitement is going up
//
// this is used to increase the excitement of a character if other characters
// are getting excited
V.Float("OtherSexExcitementRateFactor"),

// the highest excitement a character can reach using only the excitement of
// other characters; this avoids orgasms just by looking at people, see also
// LookAboveMinExcitement
V.Float("MaxOtherSexExcitement", new Limit(0, 1)),

// effect of energy on kiss movements; depends on the integration plugin, a
// value of 1.0 should make morph movements faster as energy goes up
V.Float("KissSpeedEnergyFactor"),

// excitement value under which the character is considered idle; when all
// characters in a scene are idle, some behaviours will change, such as looking
// around randomly
V.Float("IdleMaxExcitement", new Limit(0, 1)),

// impact of tiredness on excitement rate; slows down excitement buildup as
// tiredness goes up, that is, increases the delay between orgasms the more
// orgasms the character has in a row
//
// higher values give slower rates: 0.0 ignores tiredness and 1.0 will freeze
// the rate completely when tiredness is maxed out
//
// excitement rate is `rate - (rate * tiredness * this)`, where `rate` is the
// sum of emotional and physical rates and tiredness is [0, 1]
//
// example: if the rate is at 2.0, this is 0.6, and tiredness is maxed out at
// 1.0, the excitement rate becomes `2.0 - (2.0 * 1.0 * 0.6)`, which is 0.8
// (go up at 40% speed when tiredness is maxed); if the tiredness is 0.5, the
// rate becomes `2.0 - (2.0 * 0.5 * 0.6)`, which is `1.4` (go up at 70% speed
// when tiredness is at half)
V.Float("TirednessExcitementRateFactor"),


// impact of tiredness on excitement to determine gaze energy; affects speed
// of head movement and delay between switching targets
//
// gaze energy is `excitement - (tiredness * this)`, clamped [0, 1]
V.Float("GazeEnergyTirednessFactor"),

// impact of tiredness on gaze; inhibits some gaze targets, see
// MaxTirednessForRandomGaze
//
// gaze tiredness is `tiredness * this`, clamped [0, 1]
V.Float("GazeTirednessFactor"),

// impact of tiredness on excitement to determine movement energy; affects
// the speed of various movements, such as sex animations
//
// movement energy is `excitement - (tiredness * this)`, clamped [0, 1]
V.Float("MovementEnergyTirednessFactor"),

// impact of tiredness on expressions; affects range of morph values and rate
// of change for tired expressions, and dampens the other expressions
//
// expression tiredness is `tiredness * this`, clamped [0, 1]
V.Float("ExpressionTirednessFactor"),

// time in seconds after post-orgasm until movement energy can be at its
// maximum again; if greater than 0, movement energy will be forced to 0 after
// post-orgasm and ramp up over time, which makes animations restart smoothly
// instead of being very fast right after orgasm
V.Float("MovementEnergyRampUpAfterOrgasm"),


// Mood
// =====
// Controls the various moods

// anger value when the character is currently looking at something it doesn't
// like; see AvoidGazePlayerWeight and AvoidGazeOthersWeight
V.Float("AvoidGazeAnger"),

// anger value when the player is interacting with this character; as soon as
// interaction starts, anger is set to this value and hapiness to 0
//
// if this is 0, none of the stuff below applies
V.Float("AngerWhenPlayerInteracts"),

// excitement value above which this character starts being less angry; while
// excitement is below this, anger is always at AngerWhenPlayerInteracts
V.Float("AngerMaxExcitementForAnger"),

// excitement value above which this character starts getting happier; while
// excitement is below this, happiness is always at 0
V.Float("AngerMaxExcitementForHappiness"),

// impact of excitement on anger above AngerMaxExcitementForAnger
//
// anger is always at max when excitement is below AngerMaxExcitementForAnger,
// this determines how fast anger drops as excitement keeps rising
//
// for example:
// - a value of 1.0 would make anger drop to zero when excitement is at max
// - a value of 2.0 would make anger drop to zero when excitement is halfway
//   between AngerMaxExcitementForAnger and max
V.Float("AngerExcitementFactorForAnger"),

// impact of excitement on happiness above AngerMaxExcitementForHappiness
//
// happiness is always at zero when excitement is below
// AngerMaxExcitementForHappiness, this determines how fast happiness rises with
// excitement
//
// for example:
// - a value of 1.0 would set happiness to max when excitement is at max
// - a value of 2.0 would set happiness to max when excitement is halfway
//   between AngerMaxExcitementForHappiness and max
V.Float("AngerExcitementFactorForHappiness"),

// happiness will never rise above this value
V.Float("MaxHappiness"),


// Voices
// ======
// Controls datasets and pitches depending on intensities; only applies to
// MacGruber's Breathing plugin for now
//
// The voice pitch values are [0, 1]. Higher values have higher pitch. The
// integration module is in charge of figuring out what that means. For
// MacGruber's Breathing, this corresponds to a pitch between [0.8, 1.2].
//
//
// orgasm object:
//   dataset: name of the orgasm dataset
//   pitch:   pitch during orgasm
//
// datasets array:
//  object:
//    dataset:       name of the breathe dataset
//    pitch:         pitch
//
//    intensityMin,
//    intensityMax:  range of intensities where this dataset is used; intensity
//                   is [0, 1] and corresponds to the movement energy (see
//                   MovementEnergyTirednessFactor)


// Appearance
// ==========

//  maximum gloss factor; 1.0 should be realistic, but can go above or below
V.Float("MaxSweat"),

// maximum lerp towards red; 1.0 should be realistic, but can go above or below
V.Float("MaxFlush"),


// Temperature
// ===========
// Body temperature is defined by two numbers: the current value and the target
// value, both [0, 1]. `temperatureExcitementMax` is used to determine the
// target value based on excitement, and `temperatureExcitementRate` and
// `temperatureDecayRate` are rates at which the current value increases or
// decreases to reach the target

// the excitement value at which body temperature should be at 1.0 (its
// maximum); the target temperature is therefore
//     `excitement / temperatureExcitementMax`, clamped[0, 1]
V.Float("TemperatureExcitementMax", new Limit(0, 1)),

// the rate at which body temperature increases towards the current target based
// on the current excitement; the rate is the current excitement (values [0, 1])
// multiplied by this
V.Float("TemperatureExcitementRate"),

// rate at which the temperature decreases when the target is below the current
// temperature
V.Float("TemperatureDecayRate"),


// Tiredness
// =========
// Tiredness is defined by two numbers: the base value and the current value,
// both [0, 1]. The base tiredness starts at 0, goes up slightly for every
// orgasm, and decays when excitement stays low enough. The current value is
// never below base, but always shoots up to 1.0 quickly after orgasm and slowly
// goes back to base.

// the rate at which tiredness increases during the post-orgasm state; by
// default, the rate is high so 1.0 is reached during `postOrgasmTime`
V.Float("TirednessRateDuringPostOrgasm"),

// the rate at which the base value decreases if excitement is lower than
// `tirednessMaxExcitementForBaseDecay`
V.Float("TirednessBaseDecayRate"),

// the rate at which the current value decreases back to the base value
V.Float("TirednessBackToBaseRate"),

// time after post-orgasm during which the base value will not decay
V.Float("DelayAfterOrgasmUntilTirednessDecay"),

// if the excitement is above this, the base value will not decay
V.Float("TirednessMaxExcitementForBaseDecay"),

// added to the base value on each orgasm
V.Float("OrgasmBaseTirednessIncrease"),


// Voice
// =====
// central value in the range for a neutral voice pitch, defaults to 0.5,
// which is mapped to 1.0 for MacGruber's Life
V.Float("NeutralVoicePitch"),


// Sensitivity
// ===========
// Controls the rate at which excitement goes up when various body parts are
// stimulated. Each source has a "rate" and a "max":
//
//   - rate: the rate at which excitement goes up when the source is
//           activated
//   - max:  the maximum excitement value that can be reached with this
//           source alone; if this is not 1.0, the character cannot have an
//           orgasm from this source
//
// The rate is multiplied by a value that depends on the level of stimulation of
// a particular body part, controlled by the `factor` parameters below. For
// example, the default `lipsFactor` is 0.1 and `mouthFactor` is 0.9. If only
// the lips are being triggered, `mouthRate` is multiplied by 0.1. The value is
// not clamped and can go above 1.0.
//
// Although these are named "factors", they're really just added together. VaM
// does not have variable triggers that depend on the pressure being applied,
// they're either 0 or 1. These factors are therefore always multiplied by 1
// when the trigger is active. If a future version supports variable triggers,
// the factors should scale accordingly.
//
// If multiple sources are active at the same time, the highest "max" value is
// used and rates are added.
//
// As an example, the rate at which excitement goes up when the mouth is
// triggered would be something like:
//
//     ((lipsTrigger * lipsFactor) + (mouthTrigger * mouthFactor)) * mouthRate
//
// clamped between [0, mouthMax]. Both `lipsTrigger` and `mouthTrigger` can be
// either 0 or 1 depending on whether the trigger is active in VaM.
//
// Note that some excitement values are controlled by the personality, see
// PersonalityEnum.tt


// rate at which excitement goes up when the lips or mouth are being
// triggered
V.Float("MouthRate"),

// maximum excitement value when the mouth is being triggered
V.Float("MouthMax"),

// how much the lips and mouth contribute to mouthRate
V.Float("LipsFactor"),
V.Float("MouthFactor"),


// rate at which excitement goes up when the breasts are being triggered
V.Float("BreastsRate"),

// maximum excitement value when the breasts are being triggered
V.Float("BreastsMax"),

// how much the left and right breasts contribute to breastsRate
V.Float("LeftBreastFactor"),
V.Float("RightBreastFactor"),

// rate at which excitement goes up when the genitals are being triggered
V.Float("GenitalsRate"),

// maximum excitement value when the genitals are being triggered
V.Float("GenitalsMax"),

// how much the labia contributes to genitalsRate; since the labia trigger is
// the only one used for genitals, this should be 1.0
V.Float("LabiaFactor"),


// rate at which excitement goes up when penetrated
V.Float("PenetrationRate"),

// maximum excitement value when penetrated
V.Float("PenetrationMax"),

// how much the three triggers inside the vagina contribute to
// penetrationRate; note that the latter two are difficult to trigger
// normally in VaM
V.Float("VaginaFactor"),
V.Float("DeepVaginaFactor"),
V.Float("DeeperVaginaFactor"),


// rate at which excitement decreases when there is no stimulation of any
// body part
V.Float("ExcitementDecayRate"),

// excitement will reset to this value after orgasm
V.Float("ExcitementPostOrgasm"),

// time during which orgasms and post-orgasm states will last; both are used
// for animations and adjusting tiredness
V.Float("OrgasmTime"),
V.Float("PostOrgasmTime"),

// a flat value that multiplies the excitement rate, defaults to 1.0; this
// can be changed to globally increase or decrease the rate at which
// excitement changes
V.Float("RateAdjustment"),

};

#><#= Generate(vars, "PS", "Personality") #>
