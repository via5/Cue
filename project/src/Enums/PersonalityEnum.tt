<#@ include file="Enums.tt" #><#

// Terms
// =====
//
// excitement (float, [0, 1])
//     character's excitement value, orgasm at 1
//
// tiredness (float, [0, 1])
//     how tired a character is:
//         - "base" tiredness starts at 0, goes up slightly for every orgasm,
//         decays when excitement stays low enough
//         - "actual" tiredness is never below base, but always shoots up to 1.0
//         quickly after orgasm and slowly goes back to base
//
// energy (float, [0, 1])
//     how energetic a character is, goes up with excitement but can be dampened
//     by tiredness; see *TirednessFactor
//
//     energy is used for gaze and movement, but with independent factors,
//     because dampening movement too much makes the scene less interesting
//
// busy
//     used for some gaze targets; whether a person is currently doing an action
//     where they're unlikely to look away, such as a HJ, BJ, etc.
//
// weight
//     each gaze target has a weight as a number; to decide which target a
//     person should look at next, the chance of a target being picked is its
//     weight divided by the sum of the weight of all targets (that is, the
//     higher the weight, the more chances a target has of getting picked)
//
// personal space
//     a character is inside another character's personal space when certain
//     body parts are close enough (this is an expensive check, so only some
//     body parts are handled, such as hands, head, chest, hips, genitals and
//     feet)
//
// groped
//     whether a character's head, breasts or genitals are currently being
//     touched by another character
//
// sex
//     includes both penetration and groping
//
// scene idle
//     the current scene is considered idle if the excitement of all characters
//     is 0
//
// emergency
//     something characters should be looking at immediately, such as another
//     character orgasming or the player's eyes when grabbing the head
//

var vars = new V[]
{

// Gaze
// ====
// Controls what characters are looking at.

// Durations
// ---------

// time it takes to move the head to follow the eyes
V.SlidingDuration("GazeDuration"),

// time to wait before picking the next target (seconds)
V.Float("GazeRandomIntervalMinimum"),
V.Float("GazeRandomIntervalMaximum"),

// time it takes to move the head when looking at an emergency
V.Float("EmergencyGazeDuration"),


// Avoidance
// ---------

// whether to avoid looking at the player at all times (see also
// maxExcitementForAvoid)
V.Bool("AvoidGazePlayer"),

// whether to avoid looking at the player when inside personal space (see also
// maxExcitementForAvoid)
V.Bool("AvoidGazeInsidePersonalSpace"),

// whether to avoid looking at the characters involved in sex with this
// character
V.Bool("AvoidGazeDuringSex"),

// whether to avoid looking at other characters having sex but not involved with
// this character
V.Bool("AvoidGazeDuringSexOthers"),

// excitement value above which avoidance is disabled
V.Float("MaxExcitementForAvoid", new Limit(0, 1)),

// time after orgasm during which avoidable is disabled, starts after the
// post-orgasm state (seconds)
V.Float("AvoidDelayAfterOrgasm"),


// Weights
// -------

// looking at a target directly above the character's head when mood is normal
// or post-orgasm; this weight is multiplied by the character's energy
V.Float("LookAboveMaxWeight"),

// looking at a target directly above the character's head during orgasm; this
// weight is multiplied by the character's energy
V.Float("LookAboveMaxWeightOrgasm"),

// excitement value below which looking up is disabled; avoids looking up for
// low excitement, since it's a pretty strong emote, should probably be higher
// than MaxOtherSexExcitement
V.Float("LookAboveMinExcitement"),

// physical rate value below which looking up is disabled; avoids looking up
// when the excitement source is only emotional (note that rates are low values,
// typically below 0.02)
V.Float("LookAboveMinPhysicalRate"),


// looking at a random point when not busy and scene is idle
V.Float("IdleNaturalRandomWeight"),

// looking at a random point when not busy and scene is not idle
V.Float("NaturalRandomWeight"),

// looking at a random person when not busy; see also OtherEyesExcitementWeight
V.Float("NaturalOtherEyesWeight"),

// looking at a random person when busy; see also OtherEyesExcitementWeight
V.Float("BusyOtherEyesWeight"),

// looking at the player randomly when not busy, used instead of
// NaturalOtherEyesWeight for the player (allows for randomly looking at the
// player more often)
V.Float("NaturalPlayerEyesWeight"),

// looking at the player randomly when busy, used instead of BusyOtherEyesWeight
// for the player (allows for randomly looking at the player more often)
V.Float("BusyPlayerEyesWeight"),

// tiredness value above which random points and targets are disabled
V.Float("MaxTirednessForRandomGaze", new Limit(0, 1)),

// used with naturalOtherEyesWeight and busyOtherEyesWeight: multiplied by the
// target's excitement and added to those weights; this is used to increase the
// chances of looking at a target that has a high excitement value
V.Float("OtherEyesExcitementWeight"),

// looking at a person who is currently orgasming
V.Float("OtherEyesOrgasmWeight"),


// if this character is giving a BJ, looking at the other character's eyes
// or genitals
V.Float("BlowjobEyesWeight"),
V.Float("BlowjobGenitalsWeight"),

// if this character is giving a HJ, looking at the other character's eyes or
// genitals
V.Float("HandjobEyesWeight"),
V.Float("HandjobGenitalsWeight"),

// if this character is being penetrated, looking at the other character's eyes
// or genitals
V.Float("PenetratedEyesWeight"),
V.Float("PenetratedGenitalsWeight"),

// if this character penetrating another, looking at the other character's eyes
// or genitals
V.Float("PenetratingEyesWeight"),
V.Float("PenetratingGenitalsWeight"),

// while being groped, looking at the other character's eyes or the body part
// being groped
V.Float("GropedEyesWeight"),
V.Float("GropedTargetWeight"),

// while groping another, looking at the other character's eyes or the body part
// being groped
V.Float("GropingEyesWeight"),
V.Float("GropingTargetWeight"),

// if another character is giving a BJ, looking at that character's eyes or the
// target's eyes or genitals
V.Float("OtherBlowjobEyesWeight"),
V.Float("OtherBlowjobTargetEyesWeight"),
V.Float("OtherBlowjobTargetGenitalsWeight"),

// if another character is giving a HJ, looking at that character's eyes or the
// target's eyes or genitals
V.Float("OtherHandjobEyesWeight"),
V.Float("OtherHandjobTargetEyesWeight"),
V.Float("OtherHandjobTargetGenitalsWeight"),

// if another character is being penetrated, looking at that character's eyes or
// the penetrator's eyes genitals
V.Float("OtherPenetrationEyesWeight"),
V.Float("OtherPenetrationSourceEyesWeight"),
V.Float("OtherPenetrationSourceGenitalsWeight"),

// if another character is being groped, looking at that character's eyes or
// body part, or the groper's eyes
V.Float("OtherGropedEyesWeight"),
V.Float("OtherGropedSourceEyesWeight"),
V.Float("OtherGropedTargetWeight"),



// Excitement
// ==========
// Controls some excitement values that are not physiological.

// the sum of all the excitement rates (not values) of all other characters in
// the scene is multiplied by this number; the result is added to the rate at
// which this character's excitement is going up
//
// this is used to increase the excitement of a character if other characters
// are getting excited
V.Float("OtherSexExcitementRateFactor"),

// the highest excitement a character can reach using only the excitement of
// other characters; this avoids orgasms just by looking at people, see also
// LookAboveMinExcitement
V.Float("MaxOtherSexExcitement", new Limit(0, 1)),

// effect of energy on kiss movements; depends on the integration plugin, a
// value of 1.0 should make morph movements faster as energy goes up
V.Float("KissSpeedEnergyFactor"),

// excitement value under which the character is considered idle; when all
// characters in a scene are idle, some behaviours will change, such as looking
// around randomly
V.Float("IdleMaxExcitement", new Limit(0, 1)),

// impact of tiredness on excitement rate; slows down excitement buildup as
// tiredness goes up, that is, increases the delay between orgasms the more
// orgasms the character has in a row
//
// higher values give slower rates: 0.0 ignores tiredness and 1.0 will freeze
// the rate completely when tiredness is maxed out
//
// excitement rate is `rate - (rate * tiredness * this)`, where `rate` is the
// sum of emotional and physical rates and tiredness is [0, 1]
//
// example: if the rate is at 2.0, this is 0.6, and tiredness is maxed out at
// 1.0, the excitement rate becomes `2.0 - (2.0 * 1.0 * 0.6)`, which is 0.8
// (go up at 40% speed when tiredness is maxed); if the tiredness is 0.5, the
// rate becomes `2.0 - (2.0 * 0.5 * 0.6)`, which is `1.4` (go up at 70% speed
// when tiredness is at half)
V.Float("TirednessExcitementRateFactor"),


// impact of tiredness on excitement to determine gaze energy; affects speed
// of head movement and delay between switching targets
//
// gaze energy is `excitement - (tiredness * this)`, clamped [0, 1]
V.Float("GazeEnergyTirednessFactor"),

// impact of tiredness on gaze; inhibits some gaze targets, see
// MaxTirednessForRandomGaze
//
// gaze tiredness is `tiredness * this`, clamped [0, 1]
V.Float("GazeTirednessFactor"),

// impact of tiredness on excitement to determine movement energy; affects
// the speed of various movements, such as sex animations
//
// movement energy is `excitement - (tiredness * this)`, clamped [0, 1]
V.Float("MovementEnergyTirednessFactor"),

// impact of tiredness on expressions; affects range of morph values and rate
// of change for tired expressions, and dampens the other expressions
//
// expression tiredness is `tiredness * this`, clamped [0, 1]
V.Float("ExpressionTirednessFactor"),


// Anger
// =====
// Controls the anger mood, which is normally always at 0

// anger value when the player is interacting with this character; as soon as
// interaction starts, anger is set to this value and hapiness to 0
//
// if this is 0, none of the stuff below applies
V.Float("AngerWhenPlayerInteracts"),

// excitement value above which this character starts being less angry; while
// excitement is below this, anger is always at AngerWhenPlayerInteracts
V.Float("AngerMaxExcitementForAnger"),

// excitement value above which this character starts getting happier; while
// excitement is below this, happiness is always at 0
V.Float("AngerMaxExcitementForHappiness"),

// impact of excitement on anger above AngerMaxExcitementForAnger
//
// anger is always at max when excitement is below AngerMaxExcitementForAnger,
// this determines how fast anger drops as excitement keeps rising
//
// for example:
// - a value of 1.0 would make anger drop to zero when excitement is at max
// - a value of 2.0 would make anger drop to zero when excitement is halfway
//   between AngerMaxExcitementForAnger and max
V.Float("AngerExcitementFactorForAnger"),

// impact of excitement on happiness above AngerMaxExcitementForHappiness
//
// happiness is always at zero when excitement is below
// AngerMaxExcitementForHappiness, this determines how fast happiness rises with
// excitement
//
// for example:
// - a value of 1.0 would set happiness to max when excitement is at max
// - a value of 2.0 would set happiness to max when excitement is halfway
//   between AngerMaxExcitementForHappiness and max
V.Float("AngerExcitementFactorForHappiness"),



// Voices
// ======
// Controls datasets and pitches depending on intensities; only applies to
// MacGruber's Breathing plugin for now
//
// The voice pitch values are [0, 1]. Higher values have higher pitch. The
// integration module is in charge of figuring out what that means. For
// MacGruber's Breathing, this corresponds to a pitch between [0.8, 1.2].
//
//
// orgasm object:
//   dataset: name of the orgasm dataset
//   pitch:   pitch during orgasm
//
// datasets array:
//  object:
//    dataset:       name of the breathe dataset
//    pitch:         pitch
//
//    intensityMin,
//    intensityMax:  range of intensities where this dataset is used; intensity
//                   is [0, 1] and corresponds to the movement energy (see
//                   MovementEnergyTirednessFactor)

};

#><#= Generate(vars, "PSE", "Personality") #>
