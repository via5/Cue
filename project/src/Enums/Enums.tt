<#@ import namespace="System.Collections.Generic" #>
<#+
public class Limit
{
	public Limit(float min, float max)
	{
	}
}

public class V
{
	public string name, type;

	public V(string name, string type)
	{
		this.name = name;
		this.type = type;
	}

	public static V SlidingDuration(string name)
	{
		return new V(name, "slidingDuration");
	}

	public static V Bool(string name)
	{
		return new V(name, "bool");
	}

	public static V Float(string name)
	{
		return new V(name, "float");
	}

	public static V Float(string name, Limit lm)
	{
		return new V(name, "float");
	}

	public static V String(string name)
	{
		return new V(name, "string");
	}
}


public string Generate(V[] vars, string name, string file)
{
	var slidingDurations = new List<string>();
	var bools = new List<string>();
	var floats = new List<string>();
	var strings = new List<string>();

	foreach (var v in vars)
	{
		if (v.type == "slidingDuration")
			slidingDurations.Add(v.name);
		else if (v.type == "bool")
			bools.Add(v.name);
		else if (v.type == "float")
			floats.Add(v.name);
		else if (v.type == "string")
			strings.Add(v.name);
		else
			throw new Exception($"bad type {v.type}");
	}

	return Generate3(
		slidingDurations.ToArray(), bools.ToArray(),
		floats.ToArray(), strings.ToArray(),
		name, file);
}


public string Generate2(string[][] vars, string name, string file)
{
	return Generate3(vars[0], vars[1], vars[2], vars[3], name, file);
}

public string Generate3(
	string[] slidingDurations, string[] bools, string[] floats,
	string[] strings, string name, string file)
{
	string defs = "";
	string names = "";
	var allNames = new List<string>();

	//if (slidingDurations.Length > 0)
	{
		defs +=
			$"\t\t// sliding durations\r\n" +
			MakeEnum(slidingDurations, "SlidingDurationCount");

		names += MakeNames(slidingDurations, "sliding duration", allNames);
	}

	//if (bools.Length > 0)
	{
		if (defs != "")
		{
			defs += "\r\n\r\n";
			names += "\r\n\r\n";
		}

		defs +=
			$"\t\t// bools\r\n" +
			MakeEnum(bools, "BoolCount");

		names += MakeNames(bools, "bool", allNames);
	}

	//if (floats.Length > 0)
	{
		if (defs != "")
		{
			defs += "\r\n\r\n";
			names += "\r\n\r\n";
		}

		defs +=
			$"\t\t// floats\r\n" +
			MakeEnum(floats, "FloatCount");

		names += MakeNames(floats, "float", allNames);
	}

	//if (strings.Length > 0)
	{
		if (defs != "")
		{
			defs += "\r\n\r\n";
			names += "\r\n\r\n";
		}

		defs +=
			$"\t\t// strings\r\n" +
			MakeEnum(strings, "StringCount");

		names += MakeNames(strings, "string", allNames);
	}

	string allNamesArray =
		$"\t\tprivate static string[] allNames_ = new string[] {{\r\n";

	foreach (var n in allNames)
		allNamesArray += $"\t\t\t\"{n}\",\r\n";

	allNamesArray +=
		$"\t\t}};\r\n" +
		$"\r\n" +
		$"\t\tpublic static string[] AllNames\r\n" +
		$"\t\t{{\r\n" +
		$"\t\t\tget {{ return allNames_; }}\r\n" +
		$"\t\t}}";

	string s =
		$"// auto generated from {file}Enums.tt\r\n" +
		$"\r\n" +
		$"namespace Cue\r\n" +
		$"{{\r\n" +
		$"\tclass {name}_Enum : IEnumValues\r\n" +
		$"\t{{\r\n" +
		defs + "\r\n\r\n\r\n" +
		names + "\r\n\r\n\r\n" +
		allNamesArray + "\r\n" +
		$"\t}}\r\n" +
		$"}}";

	return s;
}

public string MakeEnum(string[] names, string count)
{
	string s = "";
	for (int i=0; i<names.Length; ++i)
	{
		s += $"\t\tpublic const int {names[i]} = {i};\r\n";
	}

	s +=
		$"\t\tpublic const int {count} = {names.Length};\r\n" +
		$"\t\tpublic int Get{count}() {{ return {names.Length}; }}";

	return s;
}

public string CamelCase(string s, bool firstUpper)
{
	var parts = s.Split(' ');

	if (firstUpper)
		s = parts[0].Substring(0, 1).ToUpper() + parts[0].Substring(1);
	else
		s = parts[0].Substring(0, 1).ToLower() + parts[0].Substring(1);

	for (int i = 1; i < parts.Length; ++i)
		s += parts[i].Substring(0, 1).ToUpper() + parts[1].Substring(1);

	return s;
}

public string MakeNames(string[] names, string name, List<string> allNames)
{
	string var = CamelCase(name, false) + "Names_";
	string ccName = CamelCase(name, true);

	string s =
		$"\t\tprivate static string[] {var} = new string[]\r\n" +
		$"\t\t{{\r\n";

	foreach (var v in names)
	{
		var ename = CamelCase(v, false);

		s += $"\t\t\t\"{ename}\",\r\n";
		allNames.Add(ename);
	}

	s +=
		$"\t\t}};\r\n" +
		$"\r\n" +
		$"\t\tpublic static int {ccName}FromString(string s)\r\n" +
		$"\t\t{{\r\n" +
		$"\t\t\tfor (int i = 0; i<{var}.Length; ++i)\r\n" +
		$"\t\t\t{{\r\n" +
		$"\t\t\t\tif ({var}[i] == s)\r\n" +
		$"\t\t\t\t\treturn i;\r\n" +
		$"\t\t\t}}\r\n" +
		$"\r\n" +
		$"\t\t\treturn -1;\r\n" +
		$"\t\t}}\r\n" +
		$"\r\n" +
		$"\t\tpublic string Get{ccName}Name(int i)\r\n" +
		$"\t\t{{\r\n" +
		$"\t\t\treturn {ccName}ToString(i);\r\n" +
		$"\t\t}}\r\n" +
		$"\r\n" +
		$"\t\tpublic static string {ccName}ToString(int i)\r\n" +
		$"\t\t{{\r\n" +
		$"\t\t\treturn {var}[i];\r\n" +
		$"\t\t}}\r\n" +
		$"\r\n" +
		$"\t\tpublic static string[] {ccName}Names\r\n" +
		$"\t\t{{\r\n" +
		$"\t\t\tget {{ return {var}; }}\r\n" +
		$"\t\t}}";

	return s;
}
#>
