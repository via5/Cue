<#@ import namespace="System.Collections.Generic" #>
<#+
public class Limit
{
	public Limit(float min, float max)
	{
	}
}

public class V
{
	public string name, type;
	public bool hasForced;
	public int forced;

	public V(string name, string type, bool hasForced = false, int forced = 0)
	{
		this.name = name;
		this.type = type;
		this.hasForced = hasForced;
		this.forced = forced;
	}

	public static V Value(string name)
	{
		return new V(name, "value");
	}

	public static V Value(string name, int forced)
	{
		return new V(name, "value", true, forced);
	}

	public static V Duration(string name)
	{
		return new V(name, "duration");
	}

	public static V Bool(string name)
	{
		return new V(name, "bool");
	}

	public static V Float(string name)
	{
		return new V(name, "float");
	}

	public static V Float(string name, Limit lm)
	{
		return new V(name, "float");
	}

	public static V String(string name)
	{
		return new V(name, "string");
	}
}


public string Generate(V[] vars, string name, string file, bool generateEmpty = true, string shortName="", bool generateHeader=true)
{
	var values = new List<V>();
	var durations = new List<V>();
	var bools = new List<V>();
	var floats = new List<V>();
	var strings = new List<V>();

	foreach (var v in vars)
	{
		if (v.type == "duration")
			durations.Add(v);
		else if (v.type == "bool")
			bools.Add(v);
		else if (v.type == "float")
			floats.Add(v);
		else if (v.type == "string")
			strings.Add(v);
		else if (v.type == "value")
			values.Add(v);
		else
			throw new Exception($"bad type {v.type}");
	}

	return Generate(
		values.ToArray(), durations.ToArray(), bools.ToArray(),
		floats.ToArray(), strings.ToArray(),
		name, file, generateEmpty, shortName, generateHeader);
}

public string Generate(
	V[] values,
	V[] durations, V[] bools, V[] floats,
	V[] strings, string name, string file, bool generateEmpty, string shortName,
	bool generateHeader)
{
	string defs = "";
	string names = "";
	string array = "";
	var allNames = new List<string>();
	int sectionCount = 0;
	string classStruct = "class";

	if (values.Length > 0)
	{
		classStruct = "struct";
		defs += MakeEnum(values, "Count", "int", generateEmpty, name);
		names += MakeNames(values, "", allNames, "int", generateEmpty, name, shortName);
		array += MakeArray(values, "", allNames, "int", generateEmpty, name, shortName);
		++sectionCount;
	}

	if (durations.Length > 0 || generateEmpty)
	{
		defs +=
			$"		// durations\r\n" +
			MakeEnum(durations, "DurationCount", "DurationIndex", generateEmpty);

		names += MakeNames(durations, "duration", allNames, "DurationIndex", generateEmpty, name);
		++sectionCount;
	}

	if (bools.Length > 0 || generateEmpty)
	{
		if (defs != "")
		{
			defs += "\r\n\r\n";
			names += "\r\n\r\n";
		}

		defs +=
			$"		// bools\r\n" +
			MakeEnum(bools, "BoolCount", "BoolIndex", generateEmpty);

		names += MakeNames(bools, "bool", allNames, "BoolIndex", generateEmpty, name);
		++sectionCount;
	}

	if (floats.Length > 0 || generateEmpty)
	{
		if (defs != "")
		{
			defs += "\r\n\r\n";
			names += "\r\n\r\n";
		}

		defs +=
			$"		// floats\r\n" +
			MakeEnum(floats, "FloatCount", "FloatIndex", generateEmpty);

		names += MakeNames(floats, "float", allNames, "FloatIndex", generateEmpty, name);
		++sectionCount;
	}

	if (strings.Length > 0 || generateEmpty)
	{
		if (defs != "")
		{
			defs += "\r\n\r\n";
			names += "\r\n\r\n";
		}

		defs +=
			$"		// strings\r\n" +
			MakeEnum(strings, "StringCount", "StringIndex", generateEmpty);

		names += MakeNames(strings, "string", allNames, "StringIndex", generateEmpty, name);
		++sectionCount;
	}

	string allNamesArray = "";

	if (sectionCount > 1)
	{
		allNamesArray +=
			$"		private static string[] allNames_ = new string[] {{\r\n";

		foreach (var n in allNames)
			allNamesArray += $"			\"{n}\",\r\n";

		allNamesArray +=
			$"		}};\r\n" +
			$"\r\n" +
			$"		public static string[] AllNames\r\n" +
			$"		{{\r\n" +
			$"			get {{ return allNames_; }}\r\n" +
			$"		}}\r\n" +
			$"\r\n" +
			$"		public {(generateEmpty ? "override " : "")}string[] GetAllNames()\r\n" +
			$"		{{\r\n" +
			$"			return AllNames;\r\n" +
			$"		}}";

		allNamesArray = "\r\n\r\n" + allNamesArray + "\r\n";
	}

	string s = "";

	if (generateHeader)
	{
		s +=
			$"// auto generated from {file}Enums.tt\r\n" +
			$"\r\n" +
			$"using System.Collections.Generic;\r\n";
	}

	s +=
		$"\r\n" +
		$"namespace Cue\r\n" +
		$"{{\r\n";

	if (shortName == "")
	{
		s +=
			$"	public {classStruct} {name}{(generateEmpty ? " : BasicEnumValues" : "")}\r\n" +
			$"	{{\r\n" +
			defs + "\r\n\r\n" +
			$"\r\n" +
			array + "\r\n\r\n" +
			names + "\r\n\r\n" +
			allNamesArray;
	}
	else
	{
		s +=
			$"	public class {shortName}{(generateEmpty ? " : BasicEnumValues" : "")}\r\n" +
			$"	{{\r\n" +
			defs + "\r\n" +
			$"	}}\r\n" +
			$"\r\n\r\n" +
			$"	public struct {name}{(generateEmpty ? " : BasicEnumValues" : "")}\r\n" +
			$"	{{\r\n" +
			$"\r\n" +
			array + "\r\n\r\n" +
			names + "\r\n\r\n" +
			allNamesArray;
	}

	if (values.Length > 0)
	{
		s +=
		"\r\n\r\n" +
		$"		private int v_;\r\n" +
		$"\r\n" +
		$"		private {name}(int value)\r\n" +
		$"		{{\r\n" +
		$"			v_ = value;\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public static {name} CreateInternal(int value)\r\n" +
		$"		{{\r\n" +
		$"			return new {name}(value);\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public int Int\r\n" +
		$"		{{\r\n" +
		$"			get {{ return v_; }}\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public override string ToString()\r\n" +
		$"		{{\r\n" +
		$"			return ToString(this);\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public static bool operator==({name} a, {name} b)\r\n" +
		$"		{{\r\n" +
		$"			return (a.v_ == b.v_);\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public static bool operator!=({name} a, {name} b)\r\n" +
		$"		{{\r\n" +
		$"			return (a.v_ != b.v_);\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public override bool Equals(object o)\r\n" +
		$"		{{\r\n" +
		$"			return (o is {name}) && ((({name})o).v_ == v_);\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public override int GetHashCode()\r\n" +
		$"		{{\r\n" +
		$"			return v_;\r\n" +
		$"		}}\r\n";
	}

	s +=
		$"	}}\r\n" +
		$"}}";

	return s;
}

public string MakeEnum(V[] names, string count, string indexType, bool generateEmpty, string name ="")
{
	string s = "";
	int nextValue = 0;

	for (int i=0; i<names.Length; ++i)
	{
		string v;

		if (names[i].hasForced)
		{
			v = names[i].forced.ToString();
		}
		else
		{
			v = nextValue.ToString();
			++nextValue;
		}

		if (indexType == "int")
			s += $"		public static readonly {name} {names[i].name} = {name}.CreateInternal({v})";
		else
			s += $"		public static readonly {indexType} {names[i].name} = new {indexType}({v})";

		s += $";\r\n";
	}

	s +=
		$"\r\n" +
		$"		public const int {count} = {nextValue};\r\n" +
		$"		public {(generateEmpty ? "override " : "")}int Get{count}() {{ return {nextValue}; }}";

	return s;
}

public string CamelCase(string s, bool firstUpper)
{
	var parts = s.Split(' ');

	if (firstUpper)
		s = parts[0].Substring(0, 1).ToUpper() + parts[0].Substring(1);
	else
		s = parts[0].Substring(0, 1).ToLower() + parts[0].Substring(1);

	for (int i = 1; i < parts.Length; ++i)
		s += parts[i].Substring(0, 1).ToUpper() + parts[1].Substring(1);

	return s;
}

public string MakeNames(
	V[] names, string name, List<string> allNames, string indexType,
	bool generateEmpty, string enumName, string shortName = "")
{
	string var, ccName;

	if (name == "")
	{
		var = "names_";
		ccName = "";
	}
	else
	{
		var = CamelCase(name, false) + "Names_";
		ccName = CamelCase(name, true);
	}

	string s =
		$"		private static string[] {var} = new string[]\r\n" +
		$"		{{\r\n";

	foreach (var v in names)
	{
		if (v.hasForced)
			continue;

		var ename = CamelCase(v.name, false);

		s += $"			\"{ename}\",\r\n";
		allNames.Add(ename);
	}

	string getIndex;
	string none;
	string makeValue = "";

	if (indexType == "int")
	{
		indexType = enumName;
		getIndex = "i.v_";

		if (shortName == "")
			none = "None";
		else
			none = $"CreateInternal(-1)";

		makeValue = $"{enumName}.CreateInternal(i)";
	}
	else
	{
		getIndex = "i.index";
		enumName = "int";
		none = "-1";
		makeValue = "i";
	}

	s +=
		$"		}};\r\n" +
		$"\r\n" +
		$"		public static {enumName} {ccName}FromString(string s)\r\n" +
		$"		{{\r\n" +
		$"			for (int i = 0; i<{var}.Length; ++i)\r\n" +
		$"			{{\r\n" +
		$"				if ({var}[i] == s)\r\n" +
		$"					return {makeValue};\r\n" +
		$"			}}\r\n" +
		$"\r\n" +
		$"			return {none};\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public static {enumName}[] {ccName}FromStringMany(string s)\r\n" +
		$"		{{\r\n" +
		$"			var list = new List<{enumName}>();\r\n" +
		$"			var ss = s.Split(' ');\r\n" +
		$"\r\n" +
		$"			foreach (string p in ss)\r\n" +
		$"			{{\r\n" +
		$"				string tp = p.Trim();\r\n" +
		$"				if (tp == \"\")\r\n" +
		$"					continue;\r\n" +
		$"\r\n" +
		$"				var i = {ccName}FromString(tp);\r\n" +
		$"				if (i != {none})\r\n" +
		$"					list.Add(i);\r\n" +
		$"			}}\r\n" +
		$"\r\n" +
		$"			return list.ToArray();\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public {(generateEmpty ? "override " : "")}string Get{ccName}Name({indexType} i)\r\n" +
		$"		{{\r\n" +
		$"			return {ccName}ToString(i);\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public static string {ccName}ToString({indexType} i)\r\n" +
		$"		{{\r\n" +
		$"			if ({getIndex} >= 0 && {getIndex} < {var}.Length)\r\n" +
		$"				return {var}[{getIndex}];\r\n" +
		$"			else\r\n" +
		$"				return $\"?{{{getIndex}}}\";\r\n" +
		$"		}}\r\n" +
		$"\r\n" +
		$"		public static string[] {ccName}Names\r\n" +
		$"		{{\r\n" +
		$"			get {{ return {var}; }}\r\n" +
		$"		}}";

	return s;
}

public string MakeArray(
	V[] names, string name, List<string> allNames, string indexType,
	bool generateEmpty, string enumName, string shortName = "")
{
	string prefix = (shortName == "" ? "" : shortName + ".");

	string s =
		$"		private static {enumName}[] values_ = new {enumName}[]\r\n" +
		$"		{{\r\n";

	int init = 0;
	for (int i = 0; i < names.Length; ++i)
	{
		if (names[i].hasForced)
			continue;

		s += $"			{enumName}.CreateInternal({init}),\r\n";
		++init;
	}

	s +=
		$"		}};\r\n" +
		$"\r\n" +
		$"		public static {enumName}[] Values\r\n" +
		$"		{{\r\n" +
		$"			get {{ return values_; }}\r\n" +
		$"		}}";

	return s;
}

#>
